const d=(o,a)=>{const i=o.toLowerCase(),e=a.toLowerCase(),s=[];let n=0,l=0;const c=(t,p=!1)=>{let r="";l===0?r=t.length>20?`… ${t.slice(-20)}`:t:p?r=t.length+l>100?`${t.slice(0,100-l)}… `:t:r=t.length>20?`${t.slice(0,20)} … ${t.slice(-20)}`:t,r&&s.push(r),l+=r.length,p||(s.push(["strong",a]),l+=a.length,l>=100&&s.push(" …"))};let h=i.indexOf(e,n);if(h===-1)return null;for(;h>=0;){const t=h+e.length;if(c(o.slice(n,h)),n=t,l>100)break;h=i.indexOf(e,n)}return l<100&&c(o.slice(n),!0),s},g=Object.entries,y=Object.keys,f=o=>o.reduce((a,{type:i})=>a+(i==="title"?50:i==="heading"?20:i==="custom"?10:1),0),$=(o,a)=>{var i;const e={};for(const[s,n]of g(a)){const l=((i=a[s.replace(/\/[^\\]*$/,"")])==null?void 0:i.title)||"",c=`${l?`${l} > `:""}${n.title}`,h=d(n.title,o);h&&(e[c]=[...e[c]||[],{type:"title",path:s,display:h}]),n.customFields&&g(n.customFields).forEach(([t,p])=>{p.forEach(r=>{const u=d(r,o);u&&(e[c]=[...e[c]||[],{type:"custom",path:s,index:t,display:u}])})});for(const t of n.contents){const p=d(t.header,o);p&&(e[c]=[...e[c]||[],{type:"heading",path:s+(t.slug?`#${t.slug}`:""),display:p}]);for(const r of t.contents){const u=d(r,o);u&&(e[c]=[...e[c]||[],{type:"content",header:t.header,path:s+(t.slug?`#${t.slug}`:""),display:u}])}}}return y(e).sort((s,n)=>f(e[s])-f(e[n])).map(s=>({title:s,contents:e[s]}))},m=JSON.parse("{\"/\":{\"/slides.html\":{\"title\":\"Slide page\",\"contents\":[]},\"/about/\":{\"title\":\"这个人的头像为什么总是皮卡丘\",\"contents\":[{\"header\":\"我是谁？\",\"slug\":\"我是谁\",\"contents\":[\"zju在读本科生\",\"电子科学与技术专业\",\"爱好是写代码\"]},{\"header\":\"为什么要做这个网站？\",\"slug\":\"为什么要做这个网站\",\"contents\":[\"个人知识库\",\"方便记录一下我对我可怜的电脑都做了些什么操作\",\"有些人真的不会查看markdown文件，不如直接扔个网址来的快\"]},{\"header\":\"为什么这个人的头像总是皮卡丘？\",\"slug\":\"为什么这个人的头像总是皮卡丘\",\"contents\":[\"我初一语文老师的微信头像\",\"是我学习的启蒙者\"]},{\"header\":\"如果你想和我聊聊\",\"slug\":\"如果你想和我聊聊\",\"contents\":[\"QQ：2516803593\",\"email: \",\"2516803593@qq.com\",\"3220103853@zju.edu.cn\",\"cuiyucheng2004@gmail.com\",\"wechat：不告诉你（调皮）\",\"注意\",\"不要催更！\"]}]},\"/life/\":{\"title\":\"一些想法\",\"contents\":[]},\"/tech/\":{\"title\":\"技能\",\"contents\":[{\"header\":\"Coding\",\"slug\":\"coding\",\"contents\":[\"编程寄术\"]},{\"header\":\"乱七八糟的技术\",\"slug\":\"乱七八糟的技术\",\"contents\":[\"其他技能\"]}]},\"/tech/code/callback.html\":{\"title\":\"回调函数基础\",\"contents\":[{\"header\":\"什么是回调函数？\",\"slug\":\"什么是回调函数\",\"contents\":[]},{\"header\":\"两个定义\",\"slug\":\"两个定义\",\"contents\":[\"百度百科：回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。\",\"维基百科：In computer programming, a callback is any executable code that is passed as an argument to other code, which is expected to call back (execute) the argument at a given time. This execution may be immediate as in a synchronous callback, or it might happen at a later time as in an asynchronous callback.\",\"提示\",\"把一段可执行的代码像参数传递那样传给其他代码，而这段代码会在某个时刻被调用执行，这就叫做回调。如果代码立即被执行就称为同步回调，如果在之后晚点的某个时间再执行，则称之为异步回调。\"]},{\"header\":\"为什么是回调函数？\",\"slug\":\"为什么是回调函数\",\"contents\":[\"要回答这个问题，我们先来了解一下回调函数的好处和作用，那就是解耦，对，就是这么简单的答案，就是因为这个特点，普通函数代替不了回调函数。\"]},{\"header\":\"举例\",\"slug\":\"举例\",\"contents\":[\"看一下维基百科上的一张图片：\",\"示例代码如下：\"]},{\"header\":\"解释\",\"slug\":\"解释\",\"contents\":[\"可以发现回调函数和普通函数之间的一个关键的不同：在回调中，主程序把回调函数像参数一样传入库函数。这样一来，只要我们改变传进库函数的参数，就可以实现不同的功能，是不是很灵活？并且丝毫不需要修改库函数的实现，这就是解耦。\",\"主函数和回调函数是在同一层的，而库函数在另外一层，想一想，如果库函数对我们不可见，我们修改不了库函数的实现，也就是说不能通过修改库函数让库函数调用普通函数那样实现，那我们就只能通过传入不同的回调函数了，这也就是在日常工作中常见的情况。\"]},{\"header\":\"如何使用回调函数？\",\"slug\":\"如何使用回调函数\",\"contents\":[]},{\"header\":\"示例\",\"slug\":\"示例\",\"contents\":[\"下面来看一段简单的可以执行的同步回调函数代码：\",\"运行结果过于简单，不在这里展示\"]},{\"header\":\"解释\",\"slug\":\"解释-1\",\"contents\":[\"可以看到，Handle()函数里面的参数是一个指针，在main()函数里调用Handle()函数的时候，给它传入了函数Callback_1()/Callback_2()/Callback_3()的函数名，这时候的函数名就是对应函数的指针，也就是说，回调函数其实就是函数指针的一种用法。\"]},{\"header\":\"进阶：使用带参数的回调函数\",\"slug\":\"进阶-使用带参数的回调函数\",\"contents\":[]},{\"header\":\"示例\",\"slug\":\"示例-1\",\"contents\":[\"还是以上文程序为例，但是稍作修改：\"]},{\"header\":\"解释\",\"slug\":\"解释-2\",\"contents\":[\"可以看到，并不是直接把int Handle(int (*Callback)()) 改成 int Handle(int (*Callback)(int)) 就可以的，而是通过另外增加一个参数来保存回调函数的参数值，像这里 int Handle(int y, int (*Callback)(int)) 的参数 y。同理，可以使用多个参数的回调函数。\",\"这就完成了对回调函数的基本解释\"]}]},\"/tech/code/\":{\"title\":\"我就是一臭写代码的\",\"contents\":[{\"header\":\"工具学习\",\"slug\":\"工具学习\",\"contents\":[]},{\"header\":\"Git\",\"slug\":\"git\",\"contents\":[\"一个开源的分布式版本控制系统\"]},{\"header\":\"知识储备\",\"slug\":\"知识储备\",\"contents\":[]},{\"header\":\"callback回调函数初步\",\"slug\":\"callback回调函数初步\",\"contents\":[\"阐释了回调函数的入门解释以及基础使用方法。\"]}]},\"/tech/others/Git.html\":{\"title\":\"Git：每一个开发者都必须要学习的工具\",\"contents\":[{\"header\":\"什么是Git？\",\"slug\":\"什么是git\",\"contents\":[\"Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。在开发中分布式文件管理系统，可以便于多人协作开发。\",\"交互式学习Git\",\"这里提供一个可供交互式学习Git的网站，可以先学起来，后面我会陆续更新常用指令文档。Learn Git Branching\"]},{\"header\":\"Git的安装\",\"slug\":\"git的安装\",\"contents\":[\"For Macos：自带\",\"For Windows：等我在虚拟机里研究一下再写\"]},{\"header\":\"Git初步（基础篇）\",\"slug\":\"git初步-基础篇\",\"contents\":[\"说实话，git只是一个工具，不需要了解的过于深入，只要不把命令用错就行。\",\"警告\",\"如果你在命令里发现了-f，请一定一定要谨慎，你可能会把同事的仓库吃掉！\"]},{\"header\":\"在你开始之前\",\"slug\":\"在你开始之前\",\"contents\":[\"Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！\",\"Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。\",\"Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。\",\"关于提交记录太深入的东西咱们就不再继续探讨了，现在你可以把提交记录看作是项目的快照。提交记录非常轻量，可以快速地在这些提交记录之间切换！\"]},{\"header\":\"Git commit\",\"slug\":\"git-commit\",\"contents\":[\"用于创建新的提交记录，即创建一个新的节点，并使当前分支指向新的节点\"]},{\"header\":\"Git branch\",\"slug\":\"git-branch\",\"contents\":[\"按逻辑分解工作到不同的分支\"]},{\"header\":\"Git merge\",\"slug\":\"git-merge\",\"contents\":[\"当没有一个分支包含了我们修改的所有内容，通过合并这两个分支来解决这个问题\"]},{\"header\":\"Git rebase\",\"slug\":\"git-rebase\",\"contents\":[\"第二种合并分支的方法，Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。Rebase 的优势就是可以创造更线性的提交历史。\"]},{\"header\":\"远程篇\",\"slug\":\"远程篇\",\"contents\":[]},{\"header\":\"git clone\",\"slug\":\"git-clone\",\"contents\":[]},{\"header\":\"使用\",\"slug\":\"使用\",\"contents\":[\"从技术上来讲，git clone 命令在真实的环境下的作用是在本地创建一个远程仓库的拷贝（如 github.com）。 但在我们的教程中使用这个命令会有一些不同 —— 它会在远程创建一个你本地仓库的副本。显然这和真实命令的意思刚好相反，但是它把本地仓库和远程仓库关联到了一起。\"]},{\"header\":\"发生了什么？\",\"slug\":\"发生了什么\",\"contents\":[\"第一个事就是在本地仓库多了一个名为 o/main 的分支, 这种类型的分支就叫远程分支。由于远程分支的特性导致其拥有一些特殊属性。\",\"远程分支反映了远程仓库(在你上次和它通信时)的状态。\",\"远程分支有一个特别的属性，在你切换到远程分支时，自动进入分离 HEAD 状态。\"]},{\"header\":\"为什么有'o/'？\",\"slug\":\"为什么有-o\",\"contents\":[\"远程分支有一个命名规范 —— 它们的格式是:<remote name>/<branch name>\",\"大多数的开发人员会将它们主要的远程仓库命名为 origin，并不是 o。这是因为当你用 git clone 某个仓库时，Git 已经帮你把远程仓库的名称设置为 origin 了。\",\"注意\",\"当checkout o/main并提交时，会进入HEAD分离状态\"]},{\"header\":\"git fetch\",\"slug\":\"git-fetch\",\"contents\":[]},{\"header\":\"它做了什么\",\"slug\":\"它做了什么\",\"contents\":[\"从远程仓库下载本地仓库中缺失的提交记录\",\"更新远程分支指针(如 o/main)\",\"远程分支反映了远程仓库在你最后一次与它通信时的状态，git fetch 就是你与远程仓库通信的方式了\"]},{\"header\":\"它没做什么\",\"slug\":\"它没做什么\",\"contents\":[\"git fetch 并不会改变你本地仓库的状态。它不会更新你的 main 分支，也不会修改你磁盘上的文件。\",\"可以理解为单纯的下载操作。\"]},{\"header\":\"git pull\",\"slug\":\"git-pull\",\"contents\":[\"实际上，由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。\",\"可以理解为，git pull就是git fetch和git merge的缩写\"]}]},\"/tech/others/\":{\"title\":\"技能·导航\",\"contents\":[{\"header\":\"vscode远程开发\",\"slug\":\"vscode远程开发\",\"contents\":[\"Mac -> Win\"]},{\"header\":\"Git\",\"slug\":\"git\",\"contents\":[\"一个开源的分布式版本控制系统\"]}]},\"/tech/others/vscode%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%EF%BC%9A%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0windows%E8%99%9A%E6%8B%9F%E6%9C%BA.html\":{\"title\":\"技术改变世界\",\"contents\":[{\"header\":\"\",\"slug\":\"\",\"contents\":[\"参考网址：here\",\"设置->应用->可选功能\",\"OpenSSH Client, OpenSSH Server\"]},{\"header\":\"check是否安装成功\",\"slug\":\"check是否安装成功\",\"contents\":[\"以管理员模式启动powershell\"]},{\"header\":\"设置自启动sshd\",\"slug\":\"设置自启动sshd\",\"contents\":[]},{\"header\":\"启动sshd service\",\"slug\":\"启动sshd-service\",\"contents\":[]},{\"header\":\"检查是否在监听端口22\",\"slug\":\"检查是否在监听端口22\",\"contents\":[]},{\"header\":\"检查防火墙是否放行\",\"slug\":\"检查防火墙是否放行\",\"contents\":[\"以本地虚拟机为例：\",\"注意：密码可能是你的微软账户密码\"]}]}}}");self.onmessage=({data:o})=>{self.postMessage($(o.query,m[o.routeLocale]))};
//# sourceMappingURL=original.js.map
