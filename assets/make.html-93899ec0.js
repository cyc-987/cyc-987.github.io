import{_ as a,X as n,Y as s,a0 as e}from"./framework-a7f73175.js";const l="/c/make/eg.png",i={},c=e('<h2 id="开始之前" tabindex="-1"><a class="header-anchor" href="#开始之前" aria-hidden="true">#</a> 开始之前</h2><h3 id="构建程序的步骤-c为例" tabindex="-1"><a class="header-anchor" href="#构建程序的步骤-c为例" aria-hidden="true">#</a> 构建程序的步骤（C为例）</h3><ul><li>编译预处理--&gt;<strong>.i</strong></li><li>编译成汇编代码--&gt;<strong>.s</strong></li><li>汇编成目标代码--&gt;<strong>.o</strong></li><li>链接成可执行程序--&gt;<strong>.out</strong></li></ul><p><code>$gcc &lt;filename.c&gt; --save-temps</code> 用于保存中间过程文件</p><p><code>$gcc -c &lt;filename.c&gt;</code> 只产生目标文件不链接</p><h2 id="例子程序的依赖关系" tabindex="-1"><a class="header-anchor" href="#例子程序的依赖关系" aria-hidden="true">#</a> 例子程序的依赖关系</h2><p>eg: <img src="'+l+`" alt="" loading="lazy"></p><h2 id="makefile固有变量-v1" tabindex="-1"><a class="header-anchor" href="#makefile固有变量-v1" aria-hidden="true">#</a> makefile固有变量(v1)</h2><blockquote><p>target: dependencies</p><p>actions</p></blockquote><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">sum</span><span class="token punctuation">:</span> main.o sum.o
    gcc -o sum main.o sum.o
    <span class="token comment">#gcc -o $@ main.o sum.o</span>

<span class="token target symbol">main.o</span><span class="token punctuation">:</span> main.c sum.h
    gcc -c main.c
    <span class="token comment">#gcc -c $*.c</span>

<span class="token target symbol">sum.o</span><span class="token punctuation">:</span> sum.c sum.h
    gcc -c sum.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目的：使动作和具体的目标名无关</strong></p><ul><li><code>$@</code> 目标文件</li><li><code>$*</code> 目标文件的前缀（即去掉后缀名）</li><li><code>$^</code> 所有的依赖文件</li><li><code>$&lt;</code> 第一个依赖文件</li></ul><h2 id="定义变量-v2" tabindex="-1"><a class="header-anchor" href="#定义变量-v2" aria-hidden="true">#</a> 定义变量(v2)</h2><p><strong>目的：把变动的部分集中在makefile头部</strong></p><ul><li><code>&lt;name&gt; = &lt;value&gt;</code> 定义变量</li><li><code>$(&lt;name&gt;)</code> 使用变量</li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>CC <span class="token operator">=</span> gcc
TARGET <span class="token operator">=</span> sum
OBJS <span class="token operator">=</span> main.o sum.o

<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$^</span>

<span class="token target symbol"><span class="token variable">$</span>(OBJS)</span><span class="token punctuation">:</span> sum.h
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$*.c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个例子</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>BASE <span class="token operator">=</span> /home/blufox/base
CC <span class="token operator">=</span>gcc
CFLAGS <span class="token operator">=</span> -O –Wall
EFILE <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>BASE<span class="token punctuation">)</span>/bin/compare_sorts INCLS <span class="token operator">=</span> -I<span class="token variable">$</span><span class="token punctuation">(</span>LOC<span class="token punctuation">)</span>/<span class="token keyword">include</span>
LIBS        <span class="token operator">=</span>   <span class="token variable">$</span><span class="token punctuation">(</span>LOC<span class="token punctuation">)</span>/lib/g_lib.a \\
                     <span class="token variable">$</span><span class="token punctuation">(</span>LOC<span class="token punctuation">)</span>/lib/h_lib.a
LOC        <span class="token operator">=</span>   /usr/local
OBJS <span class="token operator">=</span> main.o    another_qsort.o    chk_order.o \\
             compare.o    quicksort.o
<span class="token target symbol"><span class="token variable">$</span>(EFILE)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>
        <span class="token operator">@</span>echo “linking ...”
        <span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> –o <span class="token variable">$@</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIBS<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(OBJS)</span><span class="token punctuation">:</span> compare_sorts.h
        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>INCLS<span class="token punctuation">)</span> –c <span class="token variable">$*.c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="伪目标" tabindex="-1"><a class="header-anchor" href="#伪目标" aria-hidden="true">#</a> 伪目标</h2><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm *~ <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>make &lt;target&gt;</code>会寻找当前目录下的makefile，以<code>target</code>为目标进行动作，例如<code>make clean</code></li><li>一个makefile可以有不同的动作</li></ul><h2 id="自动分析依赖关系-v3" tabindex="-1"><a class="header-anchor" href="#自动分析依赖关系-v3" aria-hidden="true">#</a> 自动分析依赖关系(v3)</h2><ul><li><code>gcc -MMD -c main.c</code> 会在编译main.c的同时分析其中引用的头文件，产生<code>main.d</code>文件：内容<code>main.o: main.c sum.h</code></li><li>在makefile里可以引用这些.d文件，形成依赖说明</li><li><code>-include main.d sum.d</code></li></ul><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>CC <span class="token operator">=</span> gcc
CFLAG <span class="token operator">=</span> -MMD
TARGET <span class="token operator">=</span> sum
OBJS <span class="token operator">=</span> main.o sum.o
DEPS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">:</span>.o<span class="token operator">=</span>.d<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>
        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$^</span>
<span class="token keyword">-include</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEPS<span class="token punctuation">)</span>
<span class="token target symbol">.c.o</span><span class="token punctuation">:</span>
    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAG<span class="token punctuation">)</span> -c -o <span class="token variable">$@</span> <span class="token variable">$&lt;</span>
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
    rm <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEPS<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="库的发布和使用" tabindex="-1"><a class="header-anchor" href="#库的发布和使用" aria-hidden="true">#</a> 库的发布和使用</h2><p><strong>目的：避免暴露源码，避免重复编译</strong></p><h3 id="创建静态库" tabindex="-1"><a class="header-anchor" href="#创建静态库" aria-hidden="true">#</a> 创建静态库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$ar</span> rcs libsum.a sum.o
<span class="token comment">#ar rcs /usr/bin/libsum.a sum.o指定输出目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ar是一个Linux程序，它能将<strong>一个或多个</strong>.o打包成.a，即一个静态库</li><li>ar也可以用来删除、替换或提取.o文件</li><li>一般一个.a配套一个.o文件</li></ul><h3 id="使用静态库" tabindex="-1"><a class="header-anchor" href="#使用静态库" aria-hidden="true">#</a> 使用静态库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$gcc</span> <span class="token parameter variable">-o</span> <span class="token function">sum</span> main.o -L. <span class="token parameter variable">-lsum</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>-l</strong>:将libsum.a这个静态库和代码集成</li><li><strong>-L.</strong>：库在当前目录</li><li>库文件名没有<code>lib</code>也没有<code>.a</code>（实际文件名为<code>libsum.a</code>）</li></ul>`,32),t=[c];function o(p,r){return n(),s("div",null,t)}const u=a(i,[["render",o],["__file","make.html.vue"]]);export{u as default};
