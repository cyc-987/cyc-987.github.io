import{_ as a,X as e,Y as s,a0 as n}from"./framework-a7f73175.js";const o={},c=n(`<h2 id="关于表达式和语句" tabindex="-1"><a class="header-anchor" href="#关于表达式和语句" aria-hidden="true">#</a> 关于表达式和语句</h2><p><code>cout.setf(ios_base::boolalpha);</code>可以使<code>cout</code>输出<code>true</code>和<code>false</code>而不是<code>1</code>和<code>0</code></p><ul><li>C++表达式是值或值和运算符的组合，每个C++表达式都有值</li><li>表达式加上分号成为语句，反过来不全成立</li></ul><h3 id="和-的副作用和顺序点" tabindex="-1"><a class="header-anchor" href="#和-的副作用和顺序点" aria-hidden="true">#</a> ++和--的副作用和顺序点</h3><ul><li>任何完整的表达式末尾都是一个顺序点</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">+</span> x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//未定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>只保证在下一条语句执行之前x被递增两次，但是不保证x的递增顺序</li></ul>`,7),t=[c];function p(l,r){return e(),s("div",null,t)}const i=a(o,[["render",p],["__file","loop.html.vue"]]);export{i as default};
