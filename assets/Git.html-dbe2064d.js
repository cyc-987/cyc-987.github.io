import{_ as t,X as r,Y as c,a1 as a,a2 as e,$ as s,a0 as i,H as o}from"./framework-a7f73175.js";const d="/others/git/git-rebase.png",l={},h=a("h2",{id:"什么是git",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#什么是git","aria-hidden":"true"},"#"),e(" 什么是Git？")],-1),p=a("p",null,"Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。在开发中分布式文件管理系统，可以便于多人协作开发。",-1),g={class:"hint-container tip"},u=a("p",{class:"hint-container-title"},"交互式学习Git",-1),m={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},b=i(`<h2 id="git的安装" tabindex="-1"><a class="header-anchor" href="#git的安装" aria-hidden="true">#</a> Git的安装</h2><ul><li>For Macos：自带</li><li>For Windows：等我在虚拟机里研究一下再写</li></ul><h2 id="git初步-基础篇" tabindex="-1"><a class="header-anchor" href="#git初步-基础篇" aria-hidden="true">#</a> Git初步（基础篇）</h2><p>说实话，git只是一个工具，不需要了解的过于深入，只要<strong>不把命令用错</strong>就行。</p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>如果你在命令里发现了-f，请一定一定要谨慎，你可能会把同事的仓库吃掉！</p></div><h3 id="在你开始之前" tabindex="-1"><a class="header-anchor" href="#在你开始之前" aria-hidden="true">#</a> 在你开始之前</h3><p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！</p><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p><p>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。</p><p>关于提交记录太深入的东西咱们就不再继续探讨了，现在你可以把提交记录看作是项目的快照。提交记录非常轻量，可以快速地在这些提交记录之间切换！</p><h3 id="git-commit" tabindex="-1"><a class="header-anchor" href="#git-commit" aria-hidden="true">#</a> Git commit</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>用于创建新的提交记录，即创建一个新的节点，并使当前分支指向新的节点</em></p><h3 id="git-branch" tabindex="-1"><a class="header-anchor" href="#git-branch" aria-hidden="true">#</a> Git branch</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment">#创建新分支</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment">#切换到新分支</span>
<span class="token function">git</span> switch <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment">#推荐使用的切换到新分支的命令</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment">#创建新分支并切换到新分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>按逻辑分解工作到不同的分支</em></p><h3 id="git-merge" tabindex="-1"><a class="header-anchor" href="#git-merge" aria-hidden="true">#</a> Git merge</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment">#把branch2合并到当前分支里，但不改变branch2</span>

<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment">#切换到branch2</span>
<span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token comment">#把branch2也更新到最新的分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>当没有一个分支包含了我们修改的所有内容，通过合并这两个分支来解决这个问题</em></p><h3 id="git-rebase" tabindex="-1"><a class="header-anchor" href="#git-rebase" aria-hidden="true">#</a> Git rebase</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token operator">&lt;</span>branch eg.main<span class="token operator">&gt;</span> <span class="token comment">#注意，请在需要合并的分支上操作</span>
<span class="token function">git</span> rebase <span class="token operator">&lt;</span>branch eg.bugFix<span class="token operator">&gt;</span> <span class="token comment">#更新主分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><em>第二种合并分支的方法，Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。Rebase 的优势就是可以创造更线性的提交历史。</em></p><h2 id="远程篇" tabindex="-1"><a class="header-anchor" href="#远程篇" aria-hidden="true">#</a> 远程篇</h2><h3 id="git-clone" tabindex="-1"><a class="header-anchor" href="#git-clone" aria-hidden="true">#</a> git clone</h3><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4>',26),v=a("code",null,"git clone",-1),f={href:"http://github.com",target:"_blank",rel:"noopener noreferrer"},k=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="发生了什么" tabindex="-1"><a class="header-anchor" href="#发生了什么" aria-hidden="true">#</a> 发生了什么？</h4><p>第一个事就是在本地仓库多了一个名为 <code>o/main </code>的分支, 这种类型的分支就叫远程分支。由于远程分支的特性导致其拥有一些特殊属性。</p><p>远程分支反映了远程仓库(在你上次和它通信时)的状态。</p><p>远程分支有一个特别的属性，在你切换到远程分支时，自动进入分离 HEAD 状态。</p><h4 id="为什么有-o" tabindex="-1"><a class="header-anchor" href="#为什么有-o" aria-hidden="true">#</a> 为什么有&#39;o/&#39;？</h4><p>远程分支有一个命名规范 —— 它们的格式是:<code>&lt;remote name&gt;/&lt;branch name&gt;</code></p><p>大多数的开发人员会将它们主要的远程仓库命名为 <code>origin</code>，并不是 <code>o</code>。这是因为当你用 <code>git clone</code> 某个仓库时，Git 已经帮你把远程仓库的名称设置为 origin 了。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当<code>checkout o/main</code>并提交时，会进入HEAD分离状态</p></div><h3 id="git-fetch" tabindex="-1"><a class="header-anchor" href="#git-fetch" aria-hidden="true">#</a> git fetch</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="它做了什么" tabindex="-1"><a class="header-anchor" href="#它做了什么" aria-hidden="true">#</a> 它做了什么</h4><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新远程分支指针(如 <code>o/main</code>)</li></ul><p><em>远程分支反映了远程仓库在你最后一次与它通信时的状态，git fetch 就是你与远程仓库通信的方式了</em></p><h4 id="它没做什么" tabindex="-1"><a class="header-anchor" href="#它没做什么" aria-hidden="true">#</a> 它没做什么</h4><ul><li>git fetch 并不会改变你本地仓库的状态。它不会更新你的 main 分支，也不会修改你磁盘上的文件。</li><li>可以理解为单纯的下载操作。</li></ul><h3 id="git-pull" tabindex="-1"><a class="header-anchor" href="#git-pull" aria-hidden="true">#</a> git pull</h3><p>实际上，由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>可以理解为，git pull就是git fetch和git merge的缩写</em></p><h2 id="团队合作篇" tabindex="-1"><a class="header-anchor" href="#团队合作篇" aria-hidden="true">#</a> 团队合作篇</h2>`,21);function _(x,G){const n=o("ExternalLinkIcon");return r(),c("div",null,[h,p,a("div",g,[u,a("p",null,[e("这里提供一个可供交互式学习Git的网站，可以先学起来，后面我会陆续更新常用指令文档。"),a("a",m,[e("Learn Git Branching"),s(n)])])]),b,a("p",null,[e("从技术上来讲，"),v,e(" 命令在真实的环境下的作用是在本地创建一个远程仓库的拷贝（如 "),a("a",f,[e("github.com"),s(n)]),e("）。 但在我们的教程中使用这个命令会有一些不同 —— 它会在远程创建一个你本地仓库的副本。显然这和真实命令的意思刚好相反，但是它把本地仓库和远程仓库关联到了一起。")]),k])}const N=t(l,[["render",_],["__file","Git.html.vue"]]);export{N as default};
