import{_ as i,X as e,Y as a,a0 as l}from"./framework-a7f73175.js";const n={},r=l(`<h2 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句" aria-hidden="true">#</a> if语句</h2><h3 id="条件运算符和错误防范" tabindex="-1"><a class="header-anchor" href="#条件运算符和错误防范" aria-hidden="true">#</a> 条件运算符和错误防范</h3><ul><li>将<code>variable == value</code>写成<code>value == variable</code></li><li>后者会导致编译器报错，前者不会</li></ul><h2 id="逻辑表达式" tabindex="-1"><a class="header-anchor" href="#逻辑表达式" aria-hidden="true">#</a> 逻辑表达式</h2><h3 id="顺序点" tabindex="-1"><a class="header-anchor" href="#顺序点" aria-hidden="true">#</a> 顺序点</h3><ul><li>|| 和 &amp;&amp; 都是顺序点</li><li>在判断时先判断左边的表达式，如果左边的表达式已经能够确定整个表达式的值，那么右边的表达式就不会被执行</li></ul><h2 id="字符函数库cctype" tabindex="-1"><a class="header-anchor" href="#字符函数库cctype" aria-hidden="true">#</a> 字符函数库cctype</h2><p>一个从C语言继承的字符函数库，包含了一些判断字符类型的函数</p><ul><li>isalpha() 判断是否为字母</li><li>isdigit() 判断是否为数字</li><li>ispunct() 判断是否为标点符号</li><li>isspace() 判断是否为空格</li><li>isupper() 判断是否为大写字母</li><li>islower() 判断是否为小写字母</li><li>isxdigit() 判断是否为十六进制数字</li><li>isalnum() 判断是否为字母或数字</li><li>iscntrl() 判断是否为控制字符</li><li>isprint() 判断是否为可打印字符</li><li>isgraph() 判断是否为图形字符（除空格之外的打印字符）</li><li>tolower() 将大写字母转换为小写字母</li><li>toupper() 将小写字母转换为大写字母</li></ul><h2 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h2><h3 id="switch与枚举变量" tabindex="-1"><a class="header-anchor" href="#switch与枚举变量" aria-hidden="true">#</a> switch与枚举变量</h3><ul><li>通常cin无法识别枚举变量</li><li>switch将int值和枚举变量进行比较时执行变量提升</li></ul><h2 id="break和continue" tabindex="-1"><a class="header-anchor" href="#break和continue" aria-hidden="true">#</a> break和continue</h2><h3 id="危险的continue" tabindex="-1"><a class="header-anchor" href="#危险的continue" aria-hidden="true">#</a> 危险的continue</h3><ul><li>在for循环中使用continue时，直接跳到更新表达式处</li><li>在while循环中使用continue时，直接跳到测试表达式处，位于continue之后的语句不会被执行，包括<strong>更新表达式</strong></li></ul><h3 id="goto" tabindex="-1"><a class="header-anchor" href="#goto" aria-hidden="true">#</a> goto</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">goto</span> label<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>label是标签，可以是任意标识符，但是必须在goto之后</li><li>会跳转到</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>label<span class="token operator">:</span> statement
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),c=[r];function t(d,s){return e(),a("div",null,c)}const o=i(n,[["render",t],["__file","branch.html.vue"]]);export{o as default};
