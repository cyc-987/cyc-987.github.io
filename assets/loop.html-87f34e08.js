import{_ as n,X as s,Y as a,a0 as e}from"./framework-a7f73175.js";const t={},p=e(`<h2 id="关于表达式和语句" tabindex="-1"><a class="header-anchor" href="#关于表达式和语句" aria-hidden="true">#</a> 关于表达式和语句</h2><p><code>cout.setf(ios_base::boolalpha);</code>可以使<code>cout</code>输出<code>true</code>和<code>false</code>而不是<code>1</code>和<code>0</code></p><ul><li>C++表达式是值或值和运算符的组合，每个C++表达式都有值</li><li>表达式加上分号成为语句，反过来不全成立</li></ul><h3 id="和-的副作用和顺序点" tabindex="-1"><a class="header-anchor" href="#和-的副作用和顺序点" aria-hidden="true">#</a> ++和--的副作用和顺序点</h3><ul><li>任何完整的表达式末尾都是一个顺序点</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">+</span> x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//未定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>只保证在下一条语句执行之前x被递增两次，但是不保证x的递增顺序</li></ul><h3 id="语句块中的变量顺序" tabindex="-1"><a class="header-anchor" href="#语句块中的变量顺序" aria-hidden="true">#</a> 语句块中的变量顺序</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span>
    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//原始值</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//原始值</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//新值</span>
        cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//新值</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//原始值</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string类字符串的比较" tabindex="-1"><a class="header-anchor" href="#string类字符串的比较" aria-hidden="true">#</a> string类字符串的比较</h3><ul><li><code>==</code>和<code>!=</code>比较字符串的内容</li><li><code>&gt;</code>和<code>&lt;</code>比较字符串的字典顺序</li><li>eg<code>(word == &quot;done&quot;)</code></li></ul><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><h3 id="延时循环" tabindex="-1"><a class="header-anchor" href="#延时循环" aria-hidden="true">#</a> 延时循环</h3><ul><li><strong>头文件：ctime</strong></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span><span class="token comment">//包含clock()函数</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Enter the delay time, in seconds: &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> secs<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> secs<span class="token punctuation">;</span>
    clock_t delay <span class="token operator">=</span> secs <span class="token operator">*</span> CLOCKS_PER_SEC<span class="token punctuation">;</span><span class="token comment">//将秒数转换为时钟周期数</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;starting\\a\\n&quot;</span><span class="token punctuation">;</span>
    clock_t start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待时间到达</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;done \\a\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于范围的for循环-c-11" tabindex="-1"><a class="header-anchor" href="#基于范围的for循环-c-11" aria-hidden="true">#</a> 基于范围的for循环(C++11)</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">double</span> prices<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4.99</span><span class="token punctuation">,</span> <span class="token number">10.99</span><span class="token punctuation">,</span> <span class="token number">6.87</span><span class="token punctuation">,</span> <span class="token number">7.99</span><span class="token punctuation">,</span> <span class="token number">8.49</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> x <span class="token operator">:</span> prices<span class="token punctuation">)</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让代码能修改数组中内容的语法是<strong>引用</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>x <span class="token operator">:</span> prices<span class="token punctuation">)</span>
    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化列表也可以</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> x <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">6.9</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输入" tabindex="-1"><a class="header-anchor" href="#输入" aria-hidden="true">#</a> 输入</h2><h3 id="基于cin的输入" tabindex="-1"><a class="header-anchor" href="#基于cin的输入" aria-hidden="true">#</a> 基于cin的输入</h3><p><code>cin &gt;&gt; ch</code>：</p><ul><li>忽略空格</li><li>发送给cin的输入被缓冲，直到按下回车键</li></ul><h3 id="使用cin-get-char" tabindex="-1"><a class="header-anchor" href="#使用cin-get-char" aria-hidden="true">#</a> 使用cin.get(char)</h3><ul><li>可以读取空格</li><li>输入仍被缓冲，直到按下回车键<br> 备注：与C语言不同，并不需要往函数里传入地址，因为函数参数被设置成了引用</li></ul><h3 id="怀旧版get" tabindex="-1"><a class="header-anchor" href="#怀旧版get" aria-hidden="true">#</a> 怀旧版get</h3><p><strong>头文件：cstdio</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>ch <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cin<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,30),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","loop.html.vue"]]);export{u as default};
