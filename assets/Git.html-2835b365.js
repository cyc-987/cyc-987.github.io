import{_ as s,X as t,Y as i,a1 as a,a2 as n,$ as r,a0 as o,H as c}from"./framework-a7f73175.js";const p="/others/git/git-rebase.png",l={},d=a("h2",{id:"什么是git",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#什么是git","aria-hidden":"true"},"#"),n(" 什么是Git？")],-1),h=a("p",null,"Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。在开发中分布式文件管理系统，可以便于多人协作开发。",-1),m={class:"hint-container tip"},g=a("p",{class:"hint-container-title"},"交互式学习Git",-1),b={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},u=o(`<h2 id="git的安装" tabindex="-1"><a class="header-anchor" href="#git的安装" aria-hidden="true">#</a> Git的安装</h2><ul><li>For Macos：自带</li><li>For Windows：等我在虚拟机里研究一下再写</li></ul><h2 id="git初步-基础篇" tabindex="-1"><a class="header-anchor" href="#git初步-基础篇" aria-hidden="true">#</a> Git初步（基础篇）</h2><p>说实话，git只是一个工具，不需要了解的过于深入，只要<strong>不把命令用错</strong>就行。</p><div class="hint-container danger"><p class="hint-container-title">警告</p><p>如果你在命令里发现了-f，请一定一定要谨慎，你可能会把同事的仓库吃掉！</p></div><h3 id="在你开始之前" tabindex="-1"><a class="header-anchor" href="#在你开始之前" aria-hidden="true">#</a> 在你开始之前</h3><p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！</p><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p><p>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。</p><p>关于提交记录太深入的东西咱们就不再继续探讨了，现在你可以把提交记录看作是项目的快照。提交记录非常轻量，可以快速地在这些提交记录之间切换！</p><h3 id="git-commit" tabindex="-1"><a class="header-anchor" href="#git-commit" aria-hidden="true">#</a> Git commit</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>用于创建新的提交记录，即创建一个新的节点，并使当前分支指向新的节点</em></p><h3 id="git-branch" tabindex="-1"><a class="header-anchor" href="#git-branch" aria-hidden="true">#</a> Git branch</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment">#创建新分支</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment">#切换到新分支</span>
<span class="token function">git</span> switch <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment">#推荐使用的切换到新分支的命令</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span> <span class="token comment">#创建新分支并切换到新分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>按逻辑分解工作到不同的分支</em></p><h3 id="git-merge" tabindex="-1"><a class="header-anchor" href="#git-merge" aria-hidden="true">#</a> Git merge</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment">#把branch2合并到当前分支里，但不改变branch2</span>

<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment">#切换到branch2</span>
<span class="token function">git</span> merge <span class="token operator">&lt;</span>branch<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token comment">#把branch2也更新到最新的分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>当没有一个分支包含了我们修改的所有内容，通过合并这两个分支来解决这个问题</em></p><h3 id="git-rebase" tabindex="-1"><a class="header-anchor" href="#git-rebase" aria-hidden="true">#</a> Git rebase</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token operator">&lt;</span>branch eg.main<span class="token operator">&gt;</span> <span class="token comment">#注意，请在需要合并的分支上操作</span>
<span class="token function">git</span> rebase <span class="token operator">&lt;</span>branch eg.bugFix<span class="token operator">&gt;</span> <span class="token comment">#更新主分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><em>第二种合并分支的方法，Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。Rebase 的优势就是可以创造更线性的提交历史。</em></p><h2 id="高级篇" tabindex="-1"><a class="header-anchor" href="#高级篇" aria-hidden="true">#</a> 高级篇</h2><h3 id="在提交树上移动" tabindex="-1"><a class="header-anchor" href="#在提交树上移动" aria-hidden="true">#</a> 在提交树上移动</h3>',25);function k(v,f){const e=c("ExternalLinkIcon");return t(),i("div",null,[d,h,a("div",m,[g,a("p",null,[n("这里提供一个可供交互式学习Git的网站，可以先学起来，后面我会陆续更新常用指令文档。"),a("a",b,[n("Learn Git Branching"),r(e)])])]),u])}const x=s(l,[["render",k],["__file","Git.html.vue"]]);export{x as default};
