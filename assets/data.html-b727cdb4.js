import{_ as a,X as n,Y as e,a0 as s}from"./framework-a7f73175.js";const l={},i=s(`<h2 id="简单变量" tabindex="-1"><a class="header-anchor" href="#简单变量" aria-hidden="true">#</a> 简单变量</h2><h3 id="c-11的初始化方式" tabindex="-1"><a class="header-anchor" href="#c-11的初始化方式" aria-hidden="true">#</a> C++11的初始化方式</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> hamburgers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//set hamburgers to 24</span>
<span class="token keyword">int</span> emus<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//set emus to 7</span>
<span class="token keyword">int</span> pocs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//set pocs to 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用大括号<mark>初始化任何类型</mark>，可以省略等号，有助于更好防范类型转换错误</p><h3 id="以不同进制表示整数" tabindex="-1"><a class="header-anchor" href="#以不同进制表示整数" aria-hidden="true">#</a> 以不同进制表示整数</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> chest <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token comment">//decimal integer literal</span>
cout <span class="token operator">&lt;&lt;</span> chest <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> hex<span class="token punctuation">;</span><span class="token comment">//十六进制</span>
cout <span class="token operator">&lt;&lt;</span> chest <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> oct<span class="token punctuation">;</span><span class="token comment">//八进制</span>
cout <span class="token operator">&lt;&lt;</span> chest <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于char" tabindex="-1"><a class="header-anchor" href="#关于char" aria-hidden="true">#</a> 关于char</h3><ul><li>通用字符名 <ul><li>Unicode</li><li>ISO 10646</li></ul></li><li>signed char 和 unsigned char <ul><li>char类型的具体实现取决于编译器</li><li>有特殊需求时应该使用signed char 和 unsigned char</li></ul></li><li>wchar_t, char16_t, char32_t（后二是c++11新增类型） <ul><li>wchar_t: 宽字符类型</li><li>char16_t: 16位字符类型</li><li>char32_t: 32位字符类型</li><li>char16_t 和 char32_t 用于Unicode字符集</li></ul></li></ul><h3 id="bool类型" tabindex="-1"><a class="header-anchor" href="#bool类型" aria-hidden="true">#</a> bool类型</h3><ul><li>true 和 false</li><li>自动转换 <ul><li>0转换为false，非0转换为true</li><li>false转换为0，true转换为1</li></ul></li></ul><h2 id="用const替代-define" tabindex="-1"><a class="header-anchor" href="#用const替代-define" aria-hidden="true">#</a> 用const替代#define</h2><p><code>const typename variable = value;</code></p><ul><li>指明类型</li><li>有作用域</li></ul><h2 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h2><ul><li><code>cout.setf(ios_base::fixed, ios_base::floatfield);</code>强制使用定点表示法: 1.2345e+4 -&gt; 12345.000000（防止E表示法，显示后六位）</li></ul><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><h3 id="以-初始化时进行的类型转换" tabindex="-1"><a class="header-anchor" href="#以-初始化时进行的类型转换" aria-hidden="true">#</a> 以{}初始化时进行的类型转换</h3><ul><li><strong>如果存在丢失信息的风险，编译器将<mark>报错</mark></strong></li><li>如果存在截断的风险，编译器将报警告</li><li>如果存在扩展的风险，编译器将报警告</li></ul><h3 id="整型提升" tabindex="-1"><a class="header-anchor" href="#整型提升" aria-hidden="true">#</a> 整型提升</h3><ul><li>为了进行运算，C++将char、short等整型值<mark>转换为int类型</mark></li></ul><h3 id="校验表" tabindex="-1"><a class="header-anchor" href="#校验表" aria-hidden="true">#</a> 校验表</h3><ul><li>编译器通过校验表来确定在算术表达式中的类型转换（附C++11校验表） <ul><li>如果有一个操作数是long double，则将另一个操作数转换为long double</li><li>否则，如果有一个操作数是double，则将另一个操作数转换为double</li><li>否则，如果有一个操作数是float，则将另一个操作数转换为float</li><li>否则，说明操作数都是整型，进行整型提升</li><li>如果两个操作数都是有符号或无符号的，且其中一个操作数的级别比另一个低，则将较低级别的操作数转换为较高级别的操作数的类型</li><li>否则，如果有一个操作数是无符号的，且另一个操作数是有符号的，则将有符号的操作数转换为无符号的操作数的类型</li><li>否则，如果有符号类型可表示无符号类型的所有值，则将无符号的操作数转换为有符号的操作数的类型</li><li>否则，两个操作数都转换为有符号类型的无符号版本</li></ul></li></ul><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><ul><li><code>type(expression)</code>C++独有</li><li><code>(type)expression</code></li><li><code>static_cast&lt;type&gt;(expression)</code>C++独有，更严格</li></ul>`,24),t=[i];function c(o,r){return n(),e("div",null,t)}const p=a(l,[["render",c],["__file","data.html.vue"]]);export{p as default};
