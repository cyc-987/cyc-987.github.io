import{_ as n,X as a,Y as s,a0 as e}from"./framework-a7f73175.js";const t={},p=e(`<h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><h3 id="c-11的初始化方式" tabindex="-1"><a class="header-anchor" href="#c-11的初始化方式" aria-hidden="true">#</a> C++11的初始化方式</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">double</span> earnings<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1.2e4</span><span class="token punctuation">,</span> <span class="token number">1.6e4</span><span class="token punctuation">,</span> <span class="token number">1.1e4</span><span class="token punctuation">,</span> <span class="token number">1.7e4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//可以省略等号</span>
<span class="token keyword">int</span> counts<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//初始化为0</span>
<span class="token keyword">long</span> plifs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">92</span> <span class="token punctuation">,</span><span class="token number">3.0</span><span class="token punctuation">}</span><span class="token comment">//禁止缩窄转换</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>替代品：vector和array <ul><li>vector: 可变长数组</li><li>array: 固定长度数组</li></ul></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><h3 id="拼接字符串常量" tabindex="-1"><a class="header-anchor" href="#拼接字符串常量" aria-hidden="true">#</a> 拼接字符串常量</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;I&#39;d give my right arm to be&quot;</span> <span class="token string">&quot; a great violinist.\\n&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>两个字符串常量会自动拼接</li><li>两个字符串常量之间可以有空格</li></ul><h3 id="字符串输入" tabindex="-1"><a class="header-anchor" href="#字符串输入" aria-hidden="true">#</a> 字符串输入</h3><ul><li>cin通过空白（空格、制表符、换行符）来确定字符串的结束位置（这并不好用！）</li><li><code>cin.getline()</code>：面向行的输入，遇到换行符结束 <ul><li><code>cin.getline(name, ArSize);</code></li><li>读完<mark>丢弃</mark>换行符</li></ul></li><li><code>cin.get()</code>：面向行的输入，遇到换行符结束 <ul><li><code>cin.get(name, ArSize);</code></li><li>读完<mark>保留</mark>换行符</li></ul></li></ul><h4 id="tips-如何丢弃cin留在输入队列中的换行符" tabindex="-1"><a class="header-anchor" href="#tips-如何丢弃cin留在输入队列中的换行符" aria-hidden="true">#</a> tips:如何丢弃cin留在输入队列中的换行符</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cin.get(ch)也可以</span>
<span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> valuename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cin&gt;&gt;name返回cin，所以可以这样写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string类" tabindex="-1"><a class="header-anchor" href="#string类" aria-hidden="true">#</a> String类</h2><p><strong>头文件：string</strong><br><strong>命名空间：std</strong></p><p>与字符数组的区别</p><ul><li>可声明为简单变量</li><li>可自动处理调整长度</li></ul><h3 id="赋值、拼接和附加" tabindex="-1"><a class="header-anchor" href="#赋值、拼接和附加" aria-hidden="true">#</a> 赋值、拼接和附加</h3><ul><li>可以将一个string对象赋给另一个string对象</li><li>简化的字符串合并操作 <ul><li><code>str1 = str2 + str3;</code></li><li><code>str1 += str2;</code></li></ul></li><li>C风格字符串也可以赋给string对象</li></ul><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><ul><li><code>int len1 = str1.size();</code>取长度</li></ul><h3 id="i-o" tabindex="-1"><a class="header-anchor" href="#i-o" aria-hidden="true">#</a> I/O</h3><p><strong>每次读取一行时</strong></p><ul><li><code>getline(cin, str);</code></li><li>此时<code>getline</code>并不是一个方法，而是一个函数，它的第一个参数是一个输入流，第二个参数是一个string对象</li><li>读取完毕后，换行符会被丢弃</li></ul><h3 id="原始字符串-c-11" tabindex="-1"><a class="header-anchor" href="#原始字符串-c-11" aria-hidden="true">#</a> 原始字符串（C++11）</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>cout <span class="token operator">&lt;&lt;</span> <span class="token raw-string string">R&quot;(&quot;I&#39;d give my right arm to be&quot; &quot; a great violinist.&quot;)&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token raw-string string">R&quot;+*(&quot;I&#39;d give my right arm to be&quot; &quot; a great violinist.&quot;)+*&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>原始字符串的内容是括号内的内容，括号内的内容会被原样输出</li><li>可以使用自定义的定界符，如<code>R&quot;+*(xxx)+*&quot;</code>，定界符的长度可以是任意的</li></ul><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><p><strong>可以省略结构体的关键字struct！！！</strong><br></p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><ul><li>等号可选（C++11）</li><li>大括号不包含东西时置零</li><li>不允许缩窄转换</li></ul><h3 id="结构中的位字段-c也有" tabindex="-1"><a class="header-anchor" href="#结构中的位字段-c也有" aria-hidden="true">#</a> 结构中的位字段（C也有）</h3><p><strong>目的：使得创建与某个硬件上的寄存器对应的数据结构非常方便</strong><br></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">torgle_register</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> SN <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//4位，给SN</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//4位，不使用</span>
    <span class="token keyword">bool</span> goodIn <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//1位</span>
    <span class="token keyword">bool</span> goodTorgle <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//1位</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="共用体" tabindex="-1"><a class="header-anchor" href="#共用体" aria-hidden="true">#</a> 共用体</h3><p><strong>是一种数据格式，允许<mark>在相同的内存位置存储不同的数据类型</mark></strong><br></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">union</span> one4all
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> int_val<span class="token punctuation">;</span>
    <span class="token keyword">long</span> long_val<span class="token punctuation">;</span>
    <span class="token keyword">double</span> double_val<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>one4all pail<span class="token punctuation">;</span>
pail<span class="token punctuation">.</span>int_val <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> pail<span class="token punctuation">.</span>int_val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
pail<span class="token punctuation">.</span>double_val <span class="token operator">=</span> <span class="token number">1.38</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> pail<span class="token punctuation">.</span>double_val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>共用体的大小等于最大成员的大小</li><li>一次只能存储一个值</li><li>可以用来节省内存</li></ul><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">enum</span> <span class="token class-name">spectrum</span> <span class="token punctuation">{</span>red<span class="token punctuation">,</span> orange<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">,</span> violet<span class="token punctuation">,</span> indigo<span class="token punctuation">,</span> ultraviolet<span class="token punctuation">}</span><span class="token punctuation">;</span>
spectrum band<span class="token punctuation">;</span>
band <span class="token operator">=</span> blue<span class="token punctuation">;</span>
band <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">//invalid</span>
<span class="token operator">++</span>band<span class="token punctuation">;</span><span class="token comment">//invalid</span>
band <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//invalid</span>
<span class="token keyword">int</span> color <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> red<span class="token punctuation">;</span><span class="token comment">//执行整型提升</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h2><h3 id="指针和数字" tabindex="-1"><a class="header-anchor" href="#指针和数字" aria-hidden="true">#</a> 指针和数字</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> pt<span class="token punctuation">;</span>
pt <span class="token operator">=</span> <span class="token number">0xB8000000</span><span class="token punctuation">;</span><span class="token comment">//invalid in C++11</span>
pt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xB8000000</span><span class="token punctuation">;</span><span class="token comment">//valid</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用new来分配内存" tabindex="-1"><a class="header-anchor" href="#使用new来分配内存" aria-hidden="true">#</a> 使用new来分配内存</h3><p><strong>比malloc更好！</strong><br></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> pi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token comment">//分配一个int大小的内存</span>
<span class="token keyword">typename</span><span class="token operator">*</span> pointer_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">typename</span><span class="token punctuation">;</span><span class="token comment">//分配一个typename大小的内存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>常规变量声明存储在栈(stack)中</li><li>new分配的内存存储在堆(heap)或自由存储区(free store)中</li></ul><h3 id="使用delete来释放内存" tabindex="-1"><a class="header-anchor" href="#使用delete来释放内存" aria-hidden="true">#</a> 使用delete来释放内存</h3><p><strong>只能释放new分配的内存</strong><br></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">delete</span> pointer_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：</p><ul><li>不会删除指针本身，只会删除指针指向的内存</li><li>不要释放已经释放的内存</li></ul><h3 id="new与动态数组-dynamic-array-动态结构-dynamic-structure" tabindex="-1"><a class="header-anchor" href="#new与动态数组-dynamic-array-动态结构-dynamic-structure" aria-hidden="true">#</a> new与动态数组(dynamic array)，动态结构(dynamic structure)</h3><p>在运行时为数组分配空间</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> psome <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//分配10个int大小的内存</span>
<span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> psome<span class="token punctuation">;</span><span class="token comment">//释放内存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>方括号</mark>告诉程序，应该释放整个数组，而不是单个元素</p><p>也可以创建动态结构！</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>inflatable <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> inflatable<span class="token punctuation">;</span><span class="token comment">//分配一个inflatable大小的内存</span>
<span class="token keyword">delete</span> ps<span class="token punctuation">;</span><span class="token comment">//释放内存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针-数组-指针算术" tabindex="-1"><a class="header-anchor" href="#指针-数组-指针算术" aria-hidden="true">#</a> 指针，数组，指针算术</h2><ul><li>将指针变量+1后，其增加的值等于指向的类型占用的字节数</li><li>对数组应用sizeof运算符，得到的是整个数组的大小</li><li>对指针应用sizeof运算符，得到的是指针本身的大小</li></ul><p>数组的地址：</p><ul><li>数组名被解释为<mark>数组第一个元素的地址</mark></li><li>对数组名应用地址运算符时，得到的是<mark>整个数组的地址</mark></li></ul><h3 id="自动存储、静态存储和动态存储" tabindex="-1"><a class="header-anchor" href="#自动存储、静态存储和动态存储" aria-hidden="true">#</a> 自动存储、静态存储和动态存储</h3><h4 id="自动存储" tabindex="-1"><a class="header-anchor" href="#自动存储" aria-hidden="true">#</a> 自动存储</h4><ul><li>自动变量：函数内部定义的常规变量使用自动存储空间</li><li>是局部变量，作用域为包含它的代码块</li><li>存储在栈中</li></ul><h4 id="静态存储" tabindex="-1"><a class="header-anchor" href="#静态存储" aria-hidden="true">#</a> 静态存储</h4><ul><li>两种声明方式： <ul><li>在函数外部定义</li><li>使用关键字static</li></ul></li></ul><h4 id="动态存储" tabindex="-1"><a class="header-anchor" href="#动态存储" aria-hidden="true">#</a> 动态存储</h4><ul><li>使用new和delete</li><li>管理了一个内存池，称为自由存储区或堆</li><li>生命周期不完全受程序或函数的生存时间控制</li></ul><h2 id="数组的替代品-vector和array-c-11" tabindex="-1"><a class="header-anchor" href="#数组的替代品-vector和array-c-11" aria-hidden="true">#</a> 数组的替代品：vector和array(C++11)</h2><h3 id="模板类vector" tabindex="-1"><a class="header-anchor" href="#模板类vector" aria-hidden="true">#</a> 模板类vector</h3><p><strong>头文件：vector</strong><br></p><ul><li>是一种动态数组</li><li>使用new和delete来管理内存，但是自动完成</li><li>在命名空间std中</li><li>功能比数组强大，但是运行效率稍低</li></ul><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vi<span class="token punctuation">;</span><span class="token comment">//创建一个int类型的vector，size为0</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">vi</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个int类型的vector，size为10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以自动调整长度，因此可以将初始长度设置为0</li><li>要调整长度和其他操作，请使用vector类的方法</li></ul><h3 id="模板类array-c-11" tabindex="-1"><a class="header-anchor" href="#模板类array-c-11" aria-hidden="true">#</a> 模板类array(C++11)</h3><p><strong>头文件：array</strong><br></p><ul><li>长度固定，效率与数组相同</li><li>使用栈，更方便安全</li><li>命名空间std</li></ul><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">&gt;</span> ai<span class="token punctuation">;</span><span class="token comment">//创建一个int类型的array，size为10</span>
array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> ad <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">4.3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//创建一个double类型的array，size为4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较数组、vector对象和array对象" tabindex="-1"><a class="header-anchor" href="#比较数组、vector对象和array对象" aria-hidden="true">#</a> 比较数组、vector对象和array对象</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">4.3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
a1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20.2</span><span class="token punctuation">;</span><span class="token comment">//同样，c++不会检查越界</span>
a1<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">20.2</span><span class="token punctuation">;</span><span class="token comment">//会检查越界，越界会抛出异常,代价是效率低</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,86),l=[p];function o(i,c){return a(),s("div",null,l)}const u=n(t,[["render",o],["__file","compound.html.vue"]]);export{u as default};
